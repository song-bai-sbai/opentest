#include "MyLineTrack.h"

MyLineTrack::MyLineTrack(void)
{
}


MyLineTrack::~MyLineTrack(void)
{
}

void MyLineTrack::trackLine( IplImage * src,int start_x, int start_y,int end_x, int end_y)
{
	for (int m =0; m< src->width;m++)
	{
		cvSet2D(src,m,m,cvScalar(0+m,0+m,0+m,0));
	}
	judgeLine(src, start_x, start_y);
}

map<int,int> MyLineTrack::judgeLine(IplImage * src, int start_x, int start_y, int pre_x, int pre_y, int end_x, int end_y)
{
	map<int,int> result;
	if (start_x+1==end_x||start_x-1==end_x||start_x==end_x)
	{
		if (start_y==end_y||start_y-1==end_y||start_y+1==end_y)
		{

			result.insert(end_x,end_y);
			return result;
		}
	}
	int diff[8];/*0 1 2
				**3   4
				**5 6 7*/
	for (int i=0;i<8;i++)
	{
		diff[i]=9999;
	}
	CvScalar ori = cvGet2D(src, start_x, start_x);

	// point 0
	if (start_x-1>0 && start_y-1>0)
	{
		diff[0]=0;
		CvScalar p = cvGet2D(src,start_x-1,start_y-1);
		for (int k=0; k<src->nChannels; k++)
		{
			diff[0] += abs(ori.val[k]-p.val[k]);
		}
	}
	//point 1
	if (start_y-1>0)
	{
		diff[1]=0;
		CvScalar p = cvGet2D(src,start_x,start_y-1);
		for (int k=0; k<src->nChannels; k++)
		{
			diff[1] += abs(ori.val[k]-p.val[k]);
		}
	}

	//point 2
	if (start_x+1<src->width && start_y-1>0)
	{
		diff[2]=0;
		CvScalar p = cvGet2D(src,start_x+1,start_y+1);
		for (int k=0; k<src->nChannels; k++)
		{
			diff[2] += abs(ori.val[k]-p.val[k]);
		}
	}

	//point 3
	if (start_x-1>0)
	{
		diff[3]=0;
		CvScalar p = cvGet2D(src,start_x-1,start_y);
		for (int k=0; k<src->nChannels; k++)
		{
			diff[3] += abs(ori.val[k]-p.val[k]);
		}
	}

	//point 4
	if (start_x+1<src->width)
	{
		diff[4]=0;
		CvScalar p = cvGet2D(src,start_x+1,start_y);
		for (int k=0; k<src->nChannels; k++)
		{
			diff[4] += abs(ori.val[k]-p.val[k]);
		}
	}

	//point 5
	if (start_x-1>0 && start_y+1<src->height)
	{
		diff[5]=0;
		CvScalar p = cvGet2D(src,start_x-1,start_y+1);
		for (int k=0; k<src->nChannels; k++)
		{
			diff[5] += abs(ori.val[k]-p.val[k]);
		}
	}

	//point 6
	if (start_y+1<src->height)
	{
		diff[6]=0;
		CvScalar p = cvGet2D(src,start_x,start_y+1);
		for (int k=0; k<src->nChannels; k++)
		{
			diff[6] += abs(ori.val[k]-p.val[k]);
		}
	}

	//point 7
	if (start_x+1<src->width && start_y+1<src->height)
	{
		diff[7]=0;
		CvScalar p = cvGet2D(src,start_x+1,start_y+1);
		for (int k=0; k<src->nChannels; k++)
		{
			diff[7] += abs(ori.val[k]-p.val[k]);
		}
	}

	findMax(diff);
}

int MyLineTrack::findMax( int *a )
{
	int p_Num = -1;
	int	p_Value = a[0];
	for (int i=1;i<8;i++)
	{
		if (a[i]>p_Value)
		{
			p_Num=i;
			p_Value=a[i];
		}
	}

	return p_Num;
}

int MyLineTrack::getPreNum( int start_x, int start_y, int pre_x, int pre_y )
{
	if (start_x-1==pre_x)
	{
		if (start_y-1==pre_y)
		{
			return 0;
		}
		else if (start_y == pre_y)
		{
			return 3;
		}
		else if (start_y+1 == pre_y)
		{
			return 5;
		}
	}

	if (start_x==pre_x)
	{
		if (start_y-1==pre_y)
		{
			return 1;
		}
		else if (start_y+1 == pre_y)
		{
			return 6;
		}
	}

	if (start_x+1 ==pre_x)
	{
		if (start_y-1==pre_y)
		{
			return 2;
		}
		else if (start_y == pre_y)
		{
			return 4;
		}
		else if (start_y+1 == pre_y)
		{
			return 7;
		}
	}
}
