#include <iostream>
#include <opencv2/opencv.hpp>
#include <tchar.h>
#include <core/core_c.h>
#include "main.h"

using namespace std;
using namespace cv;


int _tmain(int argc, _TCHAR* argv[])
{
	// char* imagename = "lena.jpg";
	char* imagename = "line.png";

	IplImage* img=cvLoadImage(imagename,-1);
		  
	IplImage *imgForTest = NULL;

	IplImage* img_wm = cvLoadImage("th1.jpg",-1);

	if(img==NULL)
	{
		fprintf(stderr, "Can not load image %s\n", imagename);
		return -1;
	}
	/* -------------------------------  Test Operation  ---------------------------------------*/
	
	//imgForTest = test_smooth(img);

	//imgForTest = test_adjust_bright(img);

	//imgForTest = test_adjust_contrast(img);

	//imgForTest = test_usmsharp(img);
	
	//test_putWm_img(img,img_wm);

	 //imgForTest=test_resize(img);

	 //imgForTest =test_clippig(img,0,0,100,100);

	//test_faceDetect(img);

	test_LineTrack(img);

	/* -------------------------------  Test Operation  ---------------------------------------*/
	if (imgForTest == NULL)
	{
		imgForTest = cvCreateImage(cvGetSize(img),IPL_DEPTH_8U,3);
	}
	cvNamedWindow("prototype");
	cvNamedWindow("test");
	cvShowImage("prototype",img);
	cvShowImage("test",imgForTest);

	//此函数等待按键，按键盘任意键就返回
	waitKey();
	cvReleaseImage(&img); 
	cvDestroyWindow("prototype");
	cvReleaseImage(&imgForTest); 
	cvDestroyWindow("test");
	return 0;
}

IplImage * test_smooth(IplImage *src)
{
	MySmooth ms;
	//return ms.doSmooth_Gaussian(src);
	//return ms.doSmooth_Blur(src);
    return ms.partSmooth(src,100,200,200,200);
}

IplImage * test_adjust_bright(IplImage *src)
{
	MyBri_Con mb;
	return mb.adjust_bright(src,120);
}

IplImage * test_adjust_contrast(IplImage *src)
{
	MyBri_Con mb;
	return mb.adjust_contrast(src,10);
	//mb.old_AdjustContrast(src,dst,60);
}

IplImage * test_usmsharp(IplImage *src)
{
	MySharp ms ;
	return ms.usmSharp(src,40,3,2);
}

void test_putWm_img(IplImage *img, IplImage *wm)
{
	Mat imgMat(img,0); 
	Mat imgWm(wm,0);
	MyLogo_WM mlw;
	mlw.putWM_img(imgMat,imgWm,0,0);
}

IplImage* test_resize(IplImage *src)
{
	MyResize mr;
	return mr.resize_CV_INTER_LINEAR(src,0.5);
	//return mr.resize_CV_INTER_AREA(src,0.3);
	//return mr.resize_CV_INTER_NN(src,1.5);
	//return mr.resize_CV_INTER_CUBIC(src,1.5);

}

IplImage * test_clippig( IplImage * src,int start_x, int start_y,int end_x, int end_y )
{
	MyClipping mc;
	return mc.clip(src,start_x,start_y,end_x,end_y);
}

IplImage * test_rotate( IplImage *src, double angle )
{
	MyRotate mr;
	return mr.doRotate(src,angle);
}

void test_faceDetect(IplImage * img)
{
	Mat imgMat(img,0);
	CascadeClassifier cascade;
	CascadeClassifier nestedCascade;
	cascade.load("haarcascade_frontalface_alt.xml");
	nestedCascade.load("haarcascade_eye_tree_eyeglasses.xml");
	MyFaceDetect mf;
	mf.detectFace(imgMat, cascade,nestedCascade,1,true);
}

void test_LineTrack(IplImage * img)
{
	MyLineTrack mlt;
	mlt.trackLine(img,0,0,100,100);
}